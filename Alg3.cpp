#include "head.h"
#define SIZE 9
using namespace std;
int main()
{
    int a[SIZE][SIZE];
    int d[SIZE]; // минимальное расстояние
    int v[SIZE]; // посещенные вершины
    int temp, minindex, min;
    int begin_index = 0;
    system("chcp 1251");
    system("cls");
    int vertex;
    cout << "Введите номер вершины с которой хотите начать" << endl;
    cin >> vertex;
    //switchResualt(vertex);
    if (vertex == 1) {

        int a1[SIZE][SIZE] =
        { {0,7,10,0,0,0,0,0,0},
            {7,0,0,0,0,9,27,0,0},
            {10,0,0,0,31,8,0,0,0},
            {0,0,0,0,32,0,0,17,21},
            {0,0,31,32,0,0,0,0,0},
            {0,9,8,0,0,0,0,11,0},
            {0,27,0,0,0,0,0,0,15},
            {0,0,0,17,0,11,0,0,15},
            {0,0,0,21,0,0,15,15,0},

        }; // матрица связей a 
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a1[i][j];
        }
    }
    if (vertex == 2) {
        int a2[SIZE][SIZE] =
        { {0,7,0,0,0,9,27,0,0}, //b - 1
            {7,0,10,0,0,0,0,0,0}, //a - 2
            {0,10,0,0,31,8,0,0,0}, //c - 3
            {0,0,0,0,32,0,0,17,21}, //d - 4
            {0,0,31,32,0,0,0,0,0},//e - 5
            {0,0,8,0,0,0,0,11,0}, //f - 6
            {27,0,0,0,0,0,0,0,15}, //g - 7
            {0,0,0,17,0,11,0,0,15}, //h - 8
            {0,0,0,21,0,0,15,15,0}, //i - 9

        };
// матрица связей b
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a2[i][j];
        }
    }
    if (vertex == 3) {
        int a3[SIZE][SIZE] =
        { {0,10,0,0,31,8,0,0,0}, //c - 1
            {10,0,7,0,0,0,0,0,0}, //a - 2
            {0,7,0,0,0,9,27,0,0}, //b - 3
            {0,0,0,0,32,0,0,17,21}, //d - 4
            {31,0,0,32,0,0,0,0,0},//e - 5
            {8,0,0,0,0,0,0,11,0}, //f - 6
            {0,0,27,0,0,0,0,0,15}, //g - 7
            {0,0,0,17,0,11,0,0,15}, //h - 8
            {0,0,0,21,0,0,15,15,0}, //i - 9
        }; // матрица связей c
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a3[i][j];
        }
    }
    if (vertex == 4) {
        int a4[SIZE][SIZE] =
        { {0,0,0,0,32,0,0,17,21}, //d - 1
            {0,0,7,10,0,0,0,0,0}, //a - 2
            {0,7,0,0,0,9,27,0,0}, //b - 3
            {0,10,0,0,31,8,0,0,0}, //c - 4
            {32,0,0,31,0,0,0,0,0},//e - 5
            {0,0,9,8,0,0,0,11,0}, //f - 6
            {0,0,27,0,0,0,0,0,15}, //g - 7
            {17,0,0,0,0,11,0,0,15}, //h - 8
            {21,0,0,0,0,0,15,15,0}, //i - 9
        }; // матрица связей d
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a4[i][j];
        }
    }
    if (vertex == 5) {
        int a5[SIZE][SIZE] =
        { {0,0,0,31,32,0,0,0,0}, //e - 1
            {0,0,7,10,0,0,0,0,0}, //a - 2
            {0,7,0,0,0,9,27,0,0}, //b - 3
            {31,10,0,0,0,8,0,0,0}, //c - 4
            {32,0,0,0,0,0,0,17,21},//d - 5
            {0,0,9,8,0,0,0,11,0}, //f - 6
            {0,0,27,0,0,0,0,0,15}, //g - 7
            {0,0,0,0,17,11,0,0,15}, //h - 8
            {0,0,0,0,21,0,15,15,0}, //i - 9
        }; // матрица связей e
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a5[i][j];
        }
    }
    if (vertex == 6) {
        int a6[SIZE][SIZE] =
        { {0,0,9,8,0,0,0,11,0},
          {0,0,7,10,0,0,0,0,0},
          {9,7,0,0,0,0,27,0,0},
          {8,10,0,0,0,31,0,0,0},
          {0,0,0,0,0,32,0,17,21},
          {0,0,0,31,32,0,0,0,0},
          {0,0,27,0,0,0,0,0,15},
          {11,0,0,0,17,0,0,0,15},
          {0,0,0,0,21,0,15,15,0},
        };  // матрица связей f
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a6[i][j];
        }
    }
    if (vertex == 7) {
        int a7[SIZE][SIZE] =
        { {0,0,27,0,0,0,0,0,15},
          {0,0,7,10,0,0,0,0,0},
          {27,7,0,0,0,0,9,0,0},
          {0,10,0,0,0,31,8,0,0},
          {0,0,0,0,0,32,0,17,21},
          {0,0,0,31,32,0,0,0,0},
          {0,0,9,8,0,0,0,11,0},
          {0,0,0,0,17,0,11,0,15},
          {15,0,0,0,21,0,0,15,0},
        }; // матрица связей g
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a7[i][j];
        }
    }
    if (vertex == 8) {
        int a8[SIZE][SIZE] =
        { {0,0,0,0,17,0,11,0,15},
          {0,0,7,10,0,0,0,0,0},
          {0,7,0,0,0,0,9,27,0},
          {0,10,0,0,0,31,8,0,0},
          {17,0,0,0,0,32,0,0,21},
          {0,0,0,31,32,0,0,0,0},
          {11,0,9,8,0,0,0,0,0},
          {0,0,27,0,0,0,0,0,15},
          {15,0,0,0,21,0,0,15,0},
        }; // матрица связей h
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a8[i][j];
        }
    }
    if (vertex == 9) {
        int a9[SIZE][SIZE] =
        { {0,0,0,0,21,0,0,15,15},
          {0,0,7,10,0,0,0,0,0},
          {0,7,0,0,0,0,9,27,0},
          {0,10,0,0,0,31,8,0,0},
          {21,0,0,0,0,32,0,0,17},
          {0,0,0,31,32,0,0,0,0},
          {0,0,9,8,0,0,0,0,11},
          {15,0,27,0,0,0,0,0,0},
          {15,0,0,0,17,0,11,0,0},
        }; // матрица связей i
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
                a[i][j] = a9[i][j];
        }
    }
    if (vertex > 9 || vertex < 1) {
        std::cout << "Некорректный вод";

    }


    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
            printf("%5d ", a[i][j]);
        printf("\n");
    }
    //Инициализация вершин и расстояний
    for (int i = 0; i < SIZE; i++)
    {
        d[i] = 10000;
        v[i] = 1;
    }
    d[begin_index] = 0;

    // Шаг алгоритма
    do {
        minindex = 10000;
        min = 10000;
        for (int i = 0; i < SIZE; i++)
        {                                           // Если вершину ещё не обошли и вес меньше min
            if ((v[i] == 1) && (d[i] < min))
            {                                       // Переприсваиваем значения
                min = d[i];
                minindex = i;
            }
        }
        // Добавляем найденный минимальный вес
        // к текущему весу вершины
        // и сравниваем с текущим минимальным весом вершины
        if (minindex != 10000)
        {
            for (int i = 0; i < SIZE; i++)
            {
                if (a[minindex][i] > 0)
                {
                    temp = min + a[minindex][i];
                    if (temp < d[i])
                    {
                        d[i] = temp;
                    }
                }
            }
            v[minindex] = 0;
        }
    } while (minindex < 10000);
    // Вывод кратчайших расстояний до вершин
    printf("\nКратчайшие расстояния до вершин: \n");
    for (int i = 0; i < SIZE; i++)
        printf("%5d ", d[i]);

    // Восстановление пути
    int ver[SIZE]; // массив посещенных вершин
    int endVertex;
    cout << "\nВведите индекс конечной вершины\n";
    cin >> endVertex;
    int end = endVertex - 1; // индекс конечной вершины = 9 - 1
    ver[0] = end + 1; // начальный элемент - конечная вершина
    int k = 1; // индекс предыдущей вершины
    int weight = d[end]; // вес конечной вершины

    while (end != begin_index) // пока не дошли до начальной вершины
    {
        for (int i = 0; i < SIZE; i++) // просматриваем все вершины
            if (a[i][end] != 0)   // если связь есть
            {
                int temp = weight - a[i][end]; // определяем вес пути из предыдущей вершины
                if (temp == d[i]) // если вес совпал с рассчитанным
                {                 // значит из этой вершины и был переход
                    weight = temp; // сохраняем новый вес
                    end = i;       // сохраняем предыдущую вершину
                    ver[k] = i + 1; // и записываем ее в массив
                    k++;
                }
            }
    }
    // Вывод пути (начальная вершина оказалась в конце массива из k элементов)
    printf("\nВывод кратчайшего пути\n");
    for (int i = k - 1; i >= 0; i--)
        printf("%3d ", ver[i]);

    return 0;
}